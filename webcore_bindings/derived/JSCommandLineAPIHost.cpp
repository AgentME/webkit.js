/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INSPECTOR)

#include "JSCommandLineAPIHost.h"

#include "CommandLineAPIHost.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table for prototype */

static const HashTableValue JSCommandLineAPIHostPrototypeTableValues[] =
{
    { "clearConsoleMessages", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionClearConsoleMessages), (intptr_t)0 },
    { "copyText", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionCopyText), (intptr_t)1 },
    { "inspect", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionInspect), (intptr_t)2 },
    { "inspectedObject", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionInspectedObject), (intptr_t)1 },
    { "getEventListeners", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionGetEventListeners), (intptr_t)1 },
    { "databaseId", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionDatabaseId), (intptr_t)1 },
    { "storageId", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsCommandLineAPIHostPrototypeFunctionStorageId), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSCommandLineAPIHostPrototypeTable = { 16, 15, JSCommandLineAPIHostPrototypeTableValues, 0 };
const ClassInfo JSCommandLineAPIHostPrototype::s_info = { "CommandLineAPIHostPrototype", &Base::s_info, &JSCommandLineAPIHostPrototypeTable, 0, CREATE_METHOD_TABLE(JSCommandLineAPIHostPrototype) };

JSObject* JSCommandLineAPIHostPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCommandLineAPIHost>(vm, globalObject);
}

bool JSCommandLineAPIHostPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSCommandLineAPIHostPrototype* thisObject = jsCast<JSCommandLineAPIHostPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSCommandLineAPIHostPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSCommandLineAPIHost::s_info = { "CommandLineAPIHost", &Base::s_info, 0, 0 , CREATE_METHOD_TABLE(JSCommandLineAPIHost) };

JSCommandLineAPIHost::JSCommandLineAPIHost(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<CommandLineAPIHost> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSCommandLineAPIHost::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSCommandLineAPIHost::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSCommandLineAPIHostPrototype::create(vm, globalObject, JSCommandLineAPIHostPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSCommandLineAPIHost::destroy(JSC::JSCell* cell)
{
    JSCommandLineAPIHost* thisObject = static_cast<JSCommandLineAPIHost*>(cell);
    thisObject->JSCommandLineAPIHost::~JSCommandLineAPIHost();
}

JSCommandLineAPIHost::~JSCommandLineAPIHost()
{
    releaseImplIfNotNull();
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionClearConsoleMessages(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    CommandLineAPIHost& impl = castedThis->impl();
    impl.clearConsoleMessages();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionCopyText(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    CommandLineAPIHost& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& text(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.copyText(text);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionInspect(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    return JSValue::encode(castedThis->inspect(exec));
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionInspectedObject(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    return JSValue::encode(castedThis->inspectedObject(exec));
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionGetEventListeners(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    return JSValue::encode(castedThis->getEventListeners(exec));
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionDatabaseId(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    return JSValue::encode(castedThis->databaseId(exec));
}

EncodedJSValue JSC_HOST_CALL jsCommandLineAPIHostPrototypeFunctionStorageId(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSCommandLineAPIHost* castedThis = jsDynamicCast<JSCommandLineAPIHost*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSCommandLineAPIHost::info());
    return JSValue::encode(castedThis->storageId(exec));
}

bool JSCommandLineAPIHostOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSCommandLineAPIHostOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSCommandLineAPIHost* jsCommandLineAPIHost = jsCast<JSCommandLineAPIHost*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsCommandLineAPIHost->impl(), jsCommandLineAPIHost);
    jsCommandLineAPIHost->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, CommandLineAPIHost* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSCommandLineAPIHost>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to CommandLineAPIHost.
    COMPILE_ASSERT(!__is_polymorphic(CommandLineAPIHost), CommandLineAPIHost_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<CommandLineAPIHost>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSCommandLineAPIHost>(exec, globalObject, impl);
}

CommandLineAPIHost* toCommandLineAPIHost(JSC::JSValue value)
{
    return value.inherits(JSCommandLineAPIHost::info()) ? &jsCast<JSCommandLineAPIHost*>(value)->impl() : 0;
}

}

#endif // ENABLE(INSPECTOR)
