/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTypeConversions.h"

#include "TypeConversions.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSTypeConversionsTableValues[] =
{
    { "testLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestLong), (intptr_t)setJSTypeConversionsTestLong },
    { "testEnforceRangeLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeLong), (intptr_t)setJSTypeConversionsTestEnforceRangeLong },
    { "testUnsignedLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedLong), (intptr_t)setJSTypeConversionsTestUnsignedLong },
    { "testEnforceRangeUnsignedLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedLong), (intptr_t)setJSTypeConversionsTestEnforceRangeUnsignedLong },
    { "testLongLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestLongLong), (intptr_t)setJSTypeConversionsTestLongLong },
    { "testEnforceRangeLongLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeLongLong), (intptr_t)setJSTypeConversionsTestEnforceRangeLongLong },
    { "testUnsignedLongLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedLongLong), (intptr_t)setJSTypeConversionsTestUnsignedLongLong },
    { "testEnforceRangeUnsignedLongLong", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedLongLong), (intptr_t)setJSTypeConversionsTestEnforceRangeUnsignedLongLong },
    { "testByte", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestByte), (intptr_t)setJSTypeConversionsTestByte },
    { "testEnforceRangeByte", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeByte), (intptr_t)setJSTypeConversionsTestEnforceRangeByte },
    { "testOctet", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestOctet), (intptr_t)setJSTypeConversionsTestOctet },
    { "testEnforceRangeOctet", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeOctet), (intptr_t)setJSTypeConversionsTestEnforceRangeOctet },
    { "testShort", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestShort), (intptr_t)setJSTypeConversionsTestShort },
    { "testEnforceRangeShort", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeShort), (intptr_t)setJSTypeConversionsTestEnforceRangeShort },
    { "testUnsignedShort", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedShort), (intptr_t)setJSTypeConversionsTestUnsignedShort },
    { "testEnforceRangeUnsignedShort", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedShort), (intptr_t)setJSTypeConversionsTestEnforceRangeUnsignedShort },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTypeConversionsTable = { 35, 31, JSTypeConversionsTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSTypeConversionsPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSTypeConversionsPrototypeTable = { 1, 0, JSTypeConversionsPrototypeTableValues, 0 };
const ClassInfo JSTypeConversionsPrototype::s_info = { "TypeConversionsPrototype", &Base::s_info, &JSTypeConversionsPrototypeTable, 0, CREATE_METHOD_TABLE(JSTypeConversionsPrototype) };

JSObject* JSTypeConversionsPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTypeConversions>(vm, globalObject);
}

const ClassInfo JSTypeConversions::s_info = { "TypeConversions", &Base::s_info, &JSTypeConversionsTable, 0 , CREATE_METHOD_TABLE(JSTypeConversions) };

JSTypeConversions::JSTypeConversions(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<TypeConversions> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSTypeConversions::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSTypeConversions::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTypeConversionsPrototype::create(vm, globalObject, JSTypeConversionsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSTypeConversions::destroy(JSC::JSCell* cell)
{
    JSTypeConversions* thisObject = static_cast<JSTypeConversions*>(cell);
    thisObject->JSTypeConversions::~JSTypeConversions();
}

JSTypeConversions::~JSTypeConversions()
{
    releaseImplIfNotNull();
}

bool JSTypeConversions::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSTypeConversions* thisObject = jsCast<JSTypeConversions*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSTypeConversions, Base>(exec, JSTypeConversionsTable, thisObject, propertyName, slot);
}

EncodedJSValue jsTypeConversionsTestLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testUnsignedLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestLongLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeLongLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedLongLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testUnsignedLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLongLong(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestByte(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testByte());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeByte(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeByte());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestOctet(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testOctet());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeOctet(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeOctet());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestShort(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeShort(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedShort(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testUnsignedShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedShort(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    TypeConversions& impl = castedThis->impl();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedShort());
    return JSValue::encode(result);
}


void JSTypeConversions::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    JSTypeConversions* thisObject = jsCast<JSTypeConversions*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    lookupPut<JSTypeConversions, Base>(exec, propertyName, value, JSTypeConversionsTable, thisObject, slot);
}

void setJSTypeConversionsTestLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int nativeValue(toInt32(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int nativeValue(toInt32(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeLong(nativeValue);
}


void setJSTypeConversionsTestUnsignedLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    unsigned nativeValue(toUInt32(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestUnsignedLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    unsigned nativeValue(toUInt32(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeUnsignedLong(nativeValue);
}


void setJSTypeConversionsTestLongLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    long long nativeValue(toInt64(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestLongLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeLongLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    long long nativeValue(toInt64(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeLongLong(nativeValue);
}


void setJSTypeConversionsTestUnsignedLongLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    unsigned long long nativeValue(toUInt64(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestUnsignedLongLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedLongLong(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    unsigned long long nativeValue(toUInt64(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeUnsignedLongLong(nativeValue);
}


void setJSTypeConversionsTestByte(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int8_t nativeValue(toInt8(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestByte(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeByte(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int8_t nativeValue(toInt8(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeByte(nativeValue);
}


void setJSTypeConversionsTestOctet(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    uint8_t nativeValue(toUInt8(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestOctet(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeOctet(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    uint8_t nativeValue(toUInt8(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeOctet(nativeValue);
}


void setJSTypeConversionsTestShort(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int16_t nativeValue(toInt16(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestShort(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeShort(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    int16_t nativeValue(toInt16(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeShort(nativeValue);
}


void setJSTypeConversionsTestUnsignedShort(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    uint16_t nativeValue(toUInt16(exec, value, NormalConversion));
    if (exec->hadException())
        return;
    impl.setTestUnsignedShort(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedShort(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    TypeConversions& impl = castedThis->impl();
    uint16_t nativeValue(toUInt16(exec, value, EnforceRange));
    if (exec->hadException())
        return;
    impl.setTestEnforceRangeUnsignedShort(nativeValue);
}


bool JSTypeConversionsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSTypeConversionsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSTypeConversions* jsTypeConversions = jsCast<JSTypeConversions*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsTypeConversions->impl(), jsTypeConversions);
    jsTypeConversions->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, TypeConversions* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSTypeConversions>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to TypeConversions.
    COMPILE_ASSERT(!__is_polymorphic(TypeConversions), TypeConversions_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<TypeConversions>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSTypeConversions>(exec, globalObject, impl);
}

TypeConversions* toTypeConversions(JSC::JSValue value)
{
    return value.inherits(JSTypeConversions::info()) ? &jsCast<JSTypeConversions*>(value)->impl() : 0;
}

}
