/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_SOURCE)

#include "JSVideoPlaybackQuality.h"

#include "VideoPlaybackQuality.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSVideoPlaybackQualityTableValues[] =
{
    { "creationTime", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoPlaybackQualityCreationTime), (intptr_t)0 },
    { "totalVideoFrames", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoPlaybackQualityTotalVideoFrames), (intptr_t)0 },
    { "droppedVideoFrames", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoPlaybackQualityDroppedVideoFrames), (intptr_t)0 },
    { "corruptedVideoFrames", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoPlaybackQualityCorruptedVideoFrames), (intptr_t)0 },
    { "totalFrameDelay", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVideoPlaybackQualityTotalFrameDelay), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSVideoPlaybackQualityTable = { 16, 15, JSVideoPlaybackQualityTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSVideoPlaybackQualityPrototypeTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSVideoPlaybackQualityPrototypeTable = { 1, 0, JSVideoPlaybackQualityPrototypeTableValues, 0 };
const ClassInfo JSVideoPlaybackQualityPrototype::s_info = { "VideoPlaybackQualityPrototype", &Base::s_info, &JSVideoPlaybackQualityPrototypeTable, 0, CREATE_METHOD_TABLE(JSVideoPlaybackQualityPrototype) };

JSObject* JSVideoPlaybackQualityPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSVideoPlaybackQuality>(vm, globalObject);
}

const ClassInfo JSVideoPlaybackQuality::s_info = { "VideoPlaybackQuality", &Base::s_info, &JSVideoPlaybackQualityTable, 0 , CREATE_METHOD_TABLE(JSVideoPlaybackQuality) };

JSVideoPlaybackQuality::JSVideoPlaybackQuality(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<VideoPlaybackQuality> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSVideoPlaybackQuality::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSVideoPlaybackQuality::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSVideoPlaybackQualityPrototype::create(vm, globalObject, JSVideoPlaybackQualityPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSVideoPlaybackQuality::destroy(JSC::JSCell* cell)
{
    JSVideoPlaybackQuality* thisObject = static_cast<JSVideoPlaybackQuality*>(cell);
    thisObject->JSVideoPlaybackQuality::~JSVideoPlaybackQuality();
}

JSVideoPlaybackQuality::~JSVideoPlaybackQuality()
{
    releaseImplIfNotNull();
}

bool JSVideoPlaybackQuality::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSVideoPlaybackQuality* thisObject = jsCast<JSVideoPlaybackQuality*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSVideoPlaybackQuality, Base>(exec, JSVideoPlaybackQualityTable, thisObject, propertyName, slot);
}

EncodedJSValue jsVideoPlaybackQualityCreationTime(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSVideoPlaybackQuality* castedThis = jsDynamicCast<JSVideoPlaybackQuality*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    VideoPlaybackQuality& impl = castedThis->impl();
    JSValue result = jsNumber(impl.creationTime());
    return JSValue::encode(result);
}


EncodedJSValue jsVideoPlaybackQualityTotalVideoFrames(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSVideoPlaybackQuality* castedThis = jsDynamicCast<JSVideoPlaybackQuality*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    VideoPlaybackQuality& impl = castedThis->impl();
    JSValue result = jsNumber(impl.totalVideoFrames());
    return JSValue::encode(result);
}


EncodedJSValue jsVideoPlaybackQualityDroppedVideoFrames(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSVideoPlaybackQuality* castedThis = jsDynamicCast<JSVideoPlaybackQuality*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    VideoPlaybackQuality& impl = castedThis->impl();
    JSValue result = jsNumber(impl.droppedVideoFrames());
    return JSValue::encode(result);
}


EncodedJSValue jsVideoPlaybackQualityCorruptedVideoFrames(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSVideoPlaybackQuality* castedThis = jsDynamicCast<JSVideoPlaybackQuality*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    VideoPlaybackQuality& impl = castedThis->impl();
    JSValue result = jsNumber(impl.corruptedVideoFrames());
    return JSValue::encode(result);
}


EncodedJSValue jsVideoPlaybackQualityTotalFrameDelay(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSVideoPlaybackQuality* castedThis = jsDynamicCast<JSVideoPlaybackQuality*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    VideoPlaybackQuality& impl = castedThis->impl();
    JSValue result = jsNumber(impl.totalFrameDelay());
    return JSValue::encode(result);
}


bool JSVideoPlaybackQualityOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSVideoPlaybackQualityOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSVideoPlaybackQuality* jsVideoPlaybackQuality = jsCast<JSVideoPlaybackQuality*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsVideoPlaybackQuality->impl(), jsVideoPlaybackQuality);
    jsVideoPlaybackQuality->releaseImpl();
}

JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, VideoPlaybackQuality* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSVideoPlaybackQuality>(exec, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to VideoPlaybackQuality.
    COMPILE_ASSERT(!__is_polymorphic(VideoPlaybackQuality), VideoPlaybackQuality_is_polymorphic_but_idl_claims_not_to_be);
#endif
    ReportMemoryCost<VideoPlaybackQuality>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSVideoPlaybackQuality>(exec, globalObject, impl);
}

VideoPlaybackQuality* toVideoPlaybackQuality(JSC::JSValue value)
{
    return value.inherits(JSVideoPlaybackQuality::info()) ? &jsCast<JSVideoPlaybackQuality*>(value)->impl() : 0;
}

}

#endif // ENABLE(MEDIA_SOURCE)
