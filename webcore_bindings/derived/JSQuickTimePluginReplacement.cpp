/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSQuickTimePluginReplacement.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "QuickTimePluginReplacement.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSQuickTimePluginReplacementTableValues[] =
{
    { "movieSize", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsQuickTimePluginReplacementMovieSize), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSQuickTimePluginReplacementTable = { 2, 1, JSQuickTimePluginReplacementTableValues, 0 };
/* Hash table for prototype */

static const HashTableValue JSQuickTimePluginReplacementPrototypeTableValues[] =
{
    { "postEvent", DontDelete | JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsQuickTimePluginReplacementPrototypeFunctionPostEvent), (intptr_t)1 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSQuickTimePluginReplacementPrototypeTable = { 2, 1, JSQuickTimePluginReplacementPrototypeTableValues, 0 };
const ClassInfo JSQuickTimePluginReplacementPrototype::s_info = { "QuickTimePluginReplacementPrototype", &Base::s_info, &JSQuickTimePluginReplacementPrototypeTable, 0, CREATE_METHOD_TABLE(JSQuickTimePluginReplacementPrototype) };

JSObject* JSQuickTimePluginReplacementPrototype::self(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSQuickTimePluginReplacement>(vm, globalObject);
}

bool JSQuickTimePluginReplacementPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSQuickTimePluginReplacementPrototype* thisObject = jsCast<JSQuickTimePluginReplacementPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSQuickTimePluginReplacementPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSQuickTimePluginReplacement::s_info = { "QuickTimePluginReplacement", &Base::s_info, &JSQuickTimePluginReplacementTable, 0 , CREATE_METHOD_TABLE(JSQuickTimePluginReplacement) };

JSQuickTimePluginReplacement::JSQuickTimePluginReplacement(Structure* structure, JSDOMGlobalObject* globalObject, PassRefPtr<QuickTimePluginReplacement> impl)
    : JSDOMWrapper(structure, globalObject)
    , m_impl(impl.leakRef())
{
}

void JSQuickTimePluginReplacement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
}

JSObject* JSQuickTimePluginReplacement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSQuickTimePluginReplacementPrototype::create(vm, globalObject, JSQuickTimePluginReplacementPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

void JSQuickTimePluginReplacement::destroy(JSC::JSCell* cell)
{
    JSQuickTimePluginReplacement* thisObject = static_cast<JSQuickTimePluginReplacement*>(cell);
    thisObject->JSQuickTimePluginReplacement::~JSQuickTimePluginReplacement();
}

JSQuickTimePluginReplacement::~JSQuickTimePluginReplacement()
{
    releaseImplIfNotNull();
}

bool JSQuickTimePluginReplacement::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSQuickTimePluginReplacement* thisObject = jsCast<JSQuickTimePluginReplacement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    return getStaticValueSlot<JSQuickTimePluginReplacement, Base>(exec, JSQuickTimePluginReplacementTable, thisObject, propertyName, slot);
}

EncodedJSValue jsQuickTimePluginReplacementMovieSize(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSQuickTimePluginReplacement* castedThis = jsDynamicCast<JSQuickTimePluginReplacement*>(JSValue::decode(thisValue));
    UNUSED_PARAM(slotBase);
    if (!castedThis)
        return throwVMTypeError(exec);
    UNUSED_PARAM(exec);
    QuickTimePluginReplacement& impl = castedThis->impl();
    JSValue result = jsNumber(impl.movieSize());
    return JSValue::encode(result);
}


EncodedJSValue JSC_HOST_CALL jsQuickTimePluginReplacementPrototypeFunctionPostEvent(ExecState* exec)
{
    JSValue thisValue = exec->hostThisValue();
    JSQuickTimePluginReplacement* castedThis = jsDynamicCast<JSQuickTimePluginReplacement*>(thisValue);
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSQuickTimePluginReplacement::info());
    QuickTimePluginReplacement& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& eventName(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.postEvent(eventName);
    return JSValue::encode(jsUndefined());
}

bool JSQuickTimePluginReplacementOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSQuickTimePluginReplacementOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    JSQuickTimePluginReplacement* jsQuickTimePluginReplacement = jsCast<JSQuickTimePluginReplacement*>(handle.get().asCell());
    DOMWrapperWorld& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsQuickTimePluginReplacement->impl(), jsQuickTimePluginReplacement);
    jsQuickTimePluginReplacement->releaseImpl();
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7QuickTimePluginReplacement@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore26QuickTimePluginReplacementE[]; }
#endif
#endif
JSC::JSValue toJS(JSC::ExecState* exec, JSDOMGlobalObject* globalObject, QuickTimePluginReplacement* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSQuickTimePluginReplacement>(exec, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7QuickTimePluginReplacement@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore26QuickTimePluginReplacementE[2];
#if COMPILER(CLANG)
    // If this fails QuickTimePluginReplacement does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(QuickTimePluginReplacement), QuickTimePluginReplacement_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // QuickTimePluginReplacement has subclasses. If QuickTimePluginReplacement has subclasses that get passed
    // to toJS() we currently require QuickTimePluginReplacement you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    ReportMemoryCost<QuickTimePluginReplacement>::reportMemoryCost(exec, impl);
    return createNewWrapper<JSQuickTimePluginReplacement>(exec, globalObject, impl);
}

QuickTimePluginReplacement* toQuickTimePluginReplacement(JSC::JSValue value)
{
    return value.inherits(JSQuickTimePluginReplacement::info()) ? &jsCast<JSQuickTimePluginReplacement*>(value)->impl() : 0;
}

}
