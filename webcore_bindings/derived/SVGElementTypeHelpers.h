/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SVGElementTypeHelpers_h
#define SVGElementTypeHelpers_h

#include "SVGNames.h"

namespace WebCore {

class SVGAnimateMotionElement;
void isSVGAnimateMotionElement(const SVGAnimateMotionElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAnimateMotionElement(const SVGAnimateMotionElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAnimateMotionElement(const Element& element) { return element.hasTagName(SVGNames::animateMotionTag); }
inline bool isSVGAnimateMotionElement(const Element* element) { ASSERT(element); return isSVGAnimateMotionElement(*element); }
inline bool isSVGAnimateMotionElement(const Node& node) { return node.isElementNode() && isSVGAnimateMotionElement(toElement(node)); }
inline bool isSVGAnimateMotionElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAnimateMotionElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAnimateMotionElement>(const Element& element) { return isSVGAnimateMotionElement(element); }

class SVGAnimateTransformElement;
void isSVGAnimateTransformElement(const SVGAnimateTransformElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGAnimateTransformElement(const SVGAnimateTransformElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGAnimateTransformElement(const Element& element) { return element.hasTagName(SVGNames::animateTransformTag); }
inline bool isSVGAnimateTransformElement(const Element* element) { ASSERT(element); return isSVGAnimateTransformElement(*element); }
inline bool isSVGAnimateTransformElement(const Node& node) { return node.isElementNode() && isSVGAnimateTransformElement(toElement(node)); }
inline bool isSVGAnimateTransformElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGAnimateTransformElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGAnimateTransformElement>(const Element& element) { return isSVGAnimateTransformElement(element); }

class SVGCircleElement;
void isSVGCircleElement(const SVGCircleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGCircleElement(const SVGCircleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGCircleElement(const Element& element) { return element.hasTagName(SVGNames::circleTag); }
inline bool isSVGCircleElement(const Element* element) { ASSERT(element); return isSVGCircleElement(*element); }
inline bool isSVGCircleElement(const Node& node) { return node.isElementNode() && isSVGCircleElement(toElement(node)); }
inline bool isSVGCircleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGCircleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGCircleElement>(const Element& element) { return isSVGCircleElement(element); }

class SVGClipPathElement;
void isSVGClipPathElement(const SVGClipPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGClipPathElement(const SVGClipPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGClipPathElement(const Element& element) { return element.hasTagName(SVGNames::clipPathTag); }
inline bool isSVGClipPathElement(const Element* element) { ASSERT(element); return isSVGClipPathElement(*element); }
inline bool isSVGClipPathElement(const Node& node) { return node.isElementNode() && isSVGClipPathElement(toElement(node)); }
inline bool isSVGClipPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGClipPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGClipPathElement>(const Element& element) { return isSVGClipPathElement(element); }

class SVGCursorElement;
void isSVGCursorElement(const SVGCursorElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGCursorElement(const SVGCursorElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGCursorElement(const Element& element) { return element.hasTagName(SVGNames::cursorTag); }
inline bool isSVGCursorElement(const Element* element) { ASSERT(element); return isSVGCursorElement(*element); }
inline bool isSVGCursorElement(const Node& node) { return node.isElementNode() && isSVGCursorElement(toElement(node)); }
inline bool isSVGCursorElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGCursorElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGCursorElement>(const Element& element) { return isSVGCursorElement(element); }

class SVGEllipseElement;
void isSVGEllipseElement(const SVGEllipseElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGEllipseElement(const SVGEllipseElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGEllipseElement(const Element& element) { return element.hasTagName(SVGNames::ellipseTag); }
inline bool isSVGEllipseElement(const Element* element) { ASSERT(element); return isSVGEllipseElement(*element); }
inline bool isSVGEllipseElement(const Node& node) { return node.isElementNode() && isSVGEllipseElement(toElement(node)); }
inline bool isSVGEllipseElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGEllipseElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGEllipseElement>(const Element& element) { return isSVGEllipseElement(element); }

class SVGForeignObjectElement;
void isSVGForeignObjectElement(const SVGForeignObjectElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGForeignObjectElement(const SVGForeignObjectElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGForeignObjectElement(const Element& element) { return element.hasTagName(SVGNames::foreignObjectTag); }
inline bool isSVGForeignObjectElement(const Element* element) { ASSERT(element); return isSVGForeignObjectElement(*element); }
inline bool isSVGForeignObjectElement(const Node& node) { return node.isElementNode() && isSVGForeignObjectElement(toElement(node)); }
inline bool isSVGForeignObjectElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGForeignObjectElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGForeignObjectElement>(const Element& element) { return isSVGForeignObjectElement(element); }

class SVGGElement;
void isSVGGElement(const SVGGElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGGElement(const SVGGElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGGElement(const Element& element) { return element.hasTagName(SVGNames::gTag); }
inline bool isSVGGElement(const Element* element) { ASSERT(element); return isSVGGElement(*element); }
inline bool isSVGGElement(const Node& node) { return node.isElementNode() && isSVGGElement(toElement(node)); }
inline bool isSVGGElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGGElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGGElement>(const Element& element) { return isSVGGElement(element); }

class SVGImageElement;
void isSVGImageElement(const SVGImageElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGImageElement(const SVGImageElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGImageElement(const Element& element) { return element.hasTagName(SVGNames::imageTag); }
inline bool isSVGImageElement(const Element* element) { ASSERT(element); return isSVGImageElement(*element); }
inline bool isSVGImageElement(const Node& node) { return node.isElementNode() && isSVGImageElement(toElement(node)); }
inline bool isSVGImageElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGImageElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGImageElement>(const Element& element) { return isSVGImageElement(element); }

class SVGLineElement;
void isSVGLineElement(const SVGLineElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGLineElement(const SVGLineElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGLineElement(const Element& element) { return element.hasTagName(SVGNames::lineTag); }
inline bool isSVGLineElement(const Element* element) { ASSERT(element); return isSVGLineElement(*element); }
inline bool isSVGLineElement(const Node& node) { return node.isElementNode() && isSVGLineElement(toElement(node)); }
inline bool isSVGLineElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGLineElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGLineElement>(const Element& element) { return isSVGLineElement(element); }

class SVGLinearGradientElement;
void isSVGLinearGradientElement(const SVGLinearGradientElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGLinearGradientElement(const SVGLinearGradientElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGLinearGradientElement(const Element& element) { return element.hasTagName(SVGNames::linearGradientTag); }
inline bool isSVGLinearGradientElement(const Element* element) { ASSERT(element); return isSVGLinearGradientElement(*element); }
inline bool isSVGLinearGradientElement(const Node& node) { return node.isElementNode() && isSVGLinearGradientElement(toElement(node)); }
inline bool isSVGLinearGradientElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGLinearGradientElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGLinearGradientElement>(const Element& element) { return isSVGLinearGradientElement(element); }

class SVGMarkerElement;
void isSVGMarkerElement(const SVGMarkerElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMarkerElement(const SVGMarkerElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMarkerElement(const Element& element) { return element.hasTagName(SVGNames::markerTag); }
inline bool isSVGMarkerElement(const Element* element) { ASSERT(element); return isSVGMarkerElement(*element); }
inline bool isSVGMarkerElement(const Node& node) { return node.isElementNode() && isSVGMarkerElement(toElement(node)); }
inline bool isSVGMarkerElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMarkerElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMarkerElement>(const Element& element) { return isSVGMarkerElement(element); }

class SVGMaskElement;
void isSVGMaskElement(const SVGMaskElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMaskElement(const SVGMaskElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMaskElement(const Element& element) { return element.hasTagName(SVGNames::maskTag); }
inline bool isSVGMaskElement(const Element* element) { ASSERT(element); return isSVGMaskElement(*element); }
inline bool isSVGMaskElement(const Node& node) { return node.isElementNode() && isSVGMaskElement(toElement(node)); }
inline bool isSVGMaskElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMaskElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMaskElement>(const Element& element) { return isSVGMaskElement(element); }

class SVGMPathElement;
void isSVGMPathElement(const SVGMPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGMPathElement(const SVGMPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGMPathElement(const Element& element) { return element.hasTagName(SVGNames::mpathTag); }
inline bool isSVGMPathElement(const Element* element) { ASSERT(element); return isSVGMPathElement(*element); }
inline bool isSVGMPathElement(const Node& node) { return node.isElementNode() && isSVGMPathElement(toElement(node)); }
inline bool isSVGMPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGMPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGMPathElement>(const Element& element) { return isSVGMPathElement(element); }

class SVGPathElement;
void isSVGPathElement(const SVGPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPathElement(const SVGPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPathElement(const Element& element) { return element.hasTagName(SVGNames::pathTag); }
inline bool isSVGPathElement(const Element* element) { ASSERT(element); return isSVGPathElement(*element); }
inline bool isSVGPathElement(const Node& node) { return node.isElementNode() && isSVGPathElement(toElement(node)); }
inline bool isSVGPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPathElement>(const Element& element) { return isSVGPathElement(element); }

class SVGPatternElement;
void isSVGPatternElement(const SVGPatternElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPatternElement(const SVGPatternElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPatternElement(const Element& element) { return element.hasTagName(SVGNames::patternTag); }
inline bool isSVGPatternElement(const Element* element) { ASSERT(element); return isSVGPatternElement(*element); }
inline bool isSVGPatternElement(const Node& node) { return node.isElementNode() && isSVGPatternElement(toElement(node)); }
inline bool isSVGPatternElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPatternElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPatternElement>(const Element& element) { return isSVGPatternElement(element); }

class SVGPolygonElement;
void isSVGPolygonElement(const SVGPolygonElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPolygonElement(const SVGPolygonElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPolygonElement(const Element& element) { return element.hasTagName(SVGNames::polygonTag); }
inline bool isSVGPolygonElement(const Element* element) { ASSERT(element); return isSVGPolygonElement(*element); }
inline bool isSVGPolygonElement(const Node& node) { return node.isElementNode() && isSVGPolygonElement(toElement(node)); }
inline bool isSVGPolygonElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPolygonElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPolygonElement>(const Element& element) { return isSVGPolygonElement(element); }

class SVGPolylineElement;
void isSVGPolylineElement(const SVGPolylineElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGPolylineElement(const SVGPolylineElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGPolylineElement(const Element& element) { return element.hasTagName(SVGNames::polylineTag); }
inline bool isSVGPolylineElement(const Element* element) { ASSERT(element); return isSVGPolylineElement(*element); }
inline bool isSVGPolylineElement(const Node& node) { return node.isElementNode() && isSVGPolylineElement(toElement(node)); }
inline bool isSVGPolylineElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGPolylineElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGPolylineElement>(const Element& element) { return isSVGPolylineElement(element); }

class SVGRadialGradientElement;
void isSVGRadialGradientElement(const SVGRadialGradientElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGRadialGradientElement(const SVGRadialGradientElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGRadialGradientElement(const Element& element) { return element.hasTagName(SVGNames::radialGradientTag); }
inline bool isSVGRadialGradientElement(const Element* element) { ASSERT(element); return isSVGRadialGradientElement(*element); }
inline bool isSVGRadialGradientElement(const Node& node) { return node.isElementNode() && isSVGRadialGradientElement(toElement(node)); }
inline bool isSVGRadialGradientElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGRadialGradientElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGRadialGradientElement>(const Element& element) { return isSVGRadialGradientElement(element); }

class SVGRectElement;
void isSVGRectElement(const SVGRectElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGRectElement(const SVGRectElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGRectElement(const Element& element) { return element.hasTagName(SVGNames::rectTag); }
inline bool isSVGRectElement(const Element* element) { ASSERT(element); return isSVGRectElement(*element); }
inline bool isSVGRectElement(const Node& node) { return node.isElementNode() && isSVGRectElement(toElement(node)); }
inline bool isSVGRectElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGRectElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGRectElement>(const Element& element) { return isSVGRectElement(element); }

class SVGScriptElement;
void isSVGScriptElement(const SVGScriptElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGScriptElement(const SVGScriptElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGScriptElement(const Element& element) { return element.hasTagName(SVGNames::scriptTag); }
inline bool isSVGScriptElement(const Element* element) { ASSERT(element); return isSVGScriptElement(*element); }
inline bool isSVGScriptElement(const Node& node) { return node.isElementNode() && isSVGScriptElement(toElement(node)); }
inline bool isSVGScriptElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGScriptElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGScriptElement>(const Element& element) { return isSVGScriptElement(element); }

class SVGStopElement;
void isSVGStopElement(const SVGStopElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGStopElement(const SVGStopElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGStopElement(const Element& element) { return element.hasTagName(SVGNames::stopTag); }
inline bool isSVGStopElement(const Element* element) { ASSERT(element); return isSVGStopElement(*element); }
inline bool isSVGStopElement(const Node& node) { return node.isElementNode() && isSVGStopElement(toElement(node)); }
inline bool isSVGStopElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGStopElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGStopElement>(const Element& element) { return isSVGStopElement(element); }

class SVGStyleElement;
void isSVGStyleElement(const SVGStyleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGStyleElement(const SVGStyleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGStyleElement(const Element& element) { return element.hasTagName(SVGNames::styleTag); }
inline bool isSVGStyleElement(const Element* element) { ASSERT(element); return isSVGStyleElement(*element); }
inline bool isSVGStyleElement(const Node& node) { return node.isElementNode() && isSVGStyleElement(toElement(node)); }
inline bool isSVGStyleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGStyleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGStyleElement>(const Element& element) { return isSVGStyleElement(element); }

class SVGSVGElement;
void isSVGSVGElement(const SVGSVGElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGSVGElement(const SVGSVGElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGSVGElement(const Element& element) { return element.hasTagName(SVGNames::svgTag); }
inline bool isSVGSVGElement(const Element* element) { ASSERT(element); return isSVGSVGElement(*element); }
inline bool isSVGSVGElement(const Node& node) { return node.isElementNode() && isSVGSVGElement(toElement(node)); }
inline bool isSVGSVGElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGSVGElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGSVGElement>(const Element& element) { return isSVGSVGElement(element); }

class SVGTextElement;
void isSVGTextElement(const SVGTextElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTextElement(const SVGTextElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTextElement(const Element& element) { return element.hasTagName(SVGNames::textTag); }
inline bool isSVGTextElement(const Element* element) { ASSERT(element); return isSVGTextElement(*element); }
inline bool isSVGTextElement(const Node& node) { return node.isElementNode() && isSVGTextElement(toElement(node)); }
inline bool isSVGTextElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTextElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTextElement>(const Element& element) { return isSVGTextElement(element); }

class SVGTextPathElement;
void isSVGTextPathElement(const SVGTextPathElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTextPathElement(const SVGTextPathElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTextPathElement(const Element& element) { return element.hasTagName(SVGNames::textPathTag); }
inline bool isSVGTextPathElement(const Element* element) { ASSERT(element); return isSVGTextPathElement(*element); }
inline bool isSVGTextPathElement(const Node& node) { return node.isElementNode() && isSVGTextPathElement(toElement(node)); }
inline bool isSVGTextPathElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTextPathElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTextPathElement>(const Element& element) { return isSVGTextPathElement(element); }

class SVGTitleElement;
void isSVGTitleElement(const SVGTitleElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGTitleElement(const SVGTitleElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGTitleElement(const Element& element) { return element.hasTagName(SVGNames::titleTag); }
inline bool isSVGTitleElement(const Element* element) { ASSERT(element); return isSVGTitleElement(*element); }
inline bool isSVGTitleElement(const Node& node) { return node.isElementNode() && isSVGTitleElement(toElement(node)); }
inline bool isSVGTitleElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGTitleElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGTitleElement>(const Element& element) { return isSVGTitleElement(element); }

class SVGUseElement;
void isSVGUseElement(const SVGUseElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGUseElement(const SVGUseElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGUseElement(const Element& element) { return element.hasTagName(SVGNames::useTag); }
inline bool isSVGUseElement(const Element* element) { ASSERT(element); return isSVGUseElement(*element); }
inline bool isSVGUseElement(const Node& node) { return node.isElementNode() && isSVGUseElement(toElement(node)); }
inline bool isSVGUseElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGUseElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGUseElement>(const Element& element) { return isSVGUseElement(element); }

class SVGViewElement;
void isSVGViewElement(const SVGViewElement&); // Catch unnecessary runtime check of type known at compile time.
void isSVGViewElement(const SVGViewElement*); // Catch unnecessary runtime check of type known at compile time.
inline bool isSVGViewElement(const Element& element) { return element.hasTagName(SVGNames::viewTag); }
inline bool isSVGViewElement(const Element* element) { ASSERT(element); return isSVGViewElement(*element); }
inline bool isSVGViewElement(const Node& node) { return node.isElementNode() && isSVGViewElement(toElement(node)); }
inline bool isSVGViewElement(const Node* node) { ASSERT(node); return node->isElementNode() && isSVGViewElement(toElement(node)); }
template <> inline bool isElementOfType<const SVGViewElement>(const Element& element) { return isSVGViewElement(element); }

}

#endif
