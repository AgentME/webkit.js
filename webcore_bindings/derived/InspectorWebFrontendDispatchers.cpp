// File is generated by JavaScriptCore/inspector/scripts/CodeGeneratorInspector.py

// Copyright (c) 2013 Apple Inc. All Rights Reserved.
// Copyright (c) 2011 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


#include "config.h"
#include "InspectorWebFrontendDispatchers.h"

#if ENABLE(INSPECTOR)

#include <wtf/text/CString.h>
#include <wtf/text/WTFString.h>

namespace Inspector {

void InspectorApplicationCacheFrontendDispatcher::applicationCacheStatusUpdated(const Inspector::TypeBuilder::Network::FrameId& frameId, const String& manifestURL, int status)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("ApplicationCache.applicationCacheStatusUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    paramsObject->setString(ASCIILiteral("manifestURL"), manifestURL);
    paramsObject->setNumber(ASCIILiteral("status"), status);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorApplicationCacheFrontendDispatcher::networkStateUpdated(bool isNowOnline)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("ApplicationCache.networkStateUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setBoolean(ASCIILiteral("isNowOnline"), isNowOnline);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::mediaQueryResultChanged()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.mediaQueryResultChanged"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::styleSheetChanged(const Inspector::TypeBuilder::CSS::StyleSheetId& styleSheetId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.styleSheetChanged"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("styleSheetId"), styleSheetId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::namedFlowCreated(PassRefPtr<Inspector::TypeBuilder::CSS::NamedFlow> namedFlow)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.namedFlowCreated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("namedFlow"), namedFlow);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::namedFlowRemoved(int documentNodeId, const String& flowName)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.namedFlowRemoved"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("documentNodeId"), documentNodeId);
    paramsObject->setString(ASCIILiteral("flowName"), flowName);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::regionLayoutUpdated(PassRefPtr<Inspector::TypeBuilder::CSS::NamedFlow> namedFlow)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.regionLayoutUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("namedFlow"), namedFlow);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::regionOversetChanged(PassRefPtr<Inspector::TypeBuilder::CSS::NamedFlow> namedFlow)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.regionOversetChanged"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("namedFlow"), namedFlow);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::registeredNamedFlowContentElement(int documentNodeId, const String& flowName, int contentNodeId, int nextContentNodeId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.registeredNamedFlowContentElement"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("documentNodeId"), documentNodeId);
    paramsObject->setString(ASCIILiteral("flowName"), flowName);
    paramsObject->setNumber(ASCIILiteral("contentNodeId"), contentNodeId);
    paramsObject->setNumber(ASCIILiteral("nextContentNodeId"), nextContentNodeId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCSSFrontendDispatcher::unregisteredNamedFlowContentElement(int documentNodeId, const String& flowName, int contentNodeId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("CSS.unregisteredNamedFlowContentElement"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("documentNodeId"), documentNodeId);
    paramsObject->setString(ASCIILiteral("flowName"), flowName);
    paramsObject->setNumber(ASCIILiteral("contentNodeId"), contentNodeId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCanvasFrontendDispatcher::contextCreated(const Inspector::TypeBuilder::Network::FrameId& frameId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Canvas.contextCreated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorCanvasFrontendDispatcher::traceLogsRemoved(const Inspector::TypeBuilder::Network::FrameId* const frameId, const Inspector::TypeBuilder::Canvas::TraceLogId* const traceLogId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Canvas.traceLogsRemoved"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    if (frameId)
        paramsObject->setString(ASCIILiteral("frameId"), *frameId);
    if (traceLogId)
        paramsObject->setString(ASCIILiteral("traceLogId"), *traceLogId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorConsoleFrontendDispatcher::messageAdded(PassRefPtr<Inspector::TypeBuilder::Console::ConsoleMessage> message)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Console.messageAdded"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("message"), message);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorConsoleFrontendDispatcher::messageRepeatCountUpdated(int count)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Console.messageRepeatCountUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("count"), count);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorConsoleFrontendDispatcher::messagesCleared()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Console.messagesCleared"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::documentUpdated()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.documentUpdated"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::setChildNodes(int parentId, PassRefPtr<Inspector::TypeBuilder::Array<Inspector::TypeBuilder::DOM::Node> > nodes)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.setChildNodes"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("parentId"), parentId);
    paramsObject->setValue(ASCIILiteral("nodes"), nodes);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::attributeModified(int nodeId, const String& name, const String& value)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.attributeModified"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("nodeId"), nodeId);
    paramsObject->setString(ASCIILiteral("name"), name);
    paramsObject->setString(ASCIILiteral("value"), value);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::attributeRemoved(int nodeId, const String& name)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.attributeRemoved"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("nodeId"), nodeId);
    paramsObject->setString(ASCIILiteral("name"), name);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::inlineStyleInvalidated(PassRefPtr<Inspector::TypeBuilder::Array<int> > nodeIds)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.inlineStyleInvalidated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("nodeIds"), nodeIds);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::characterDataModified(int nodeId, const String& characterData)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.characterDataModified"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("nodeId"), nodeId);
    paramsObject->setString(ASCIILiteral("characterData"), characterData);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::childNodeCountUpdated(int nodeId, int childNodeCount)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.childNodeCountUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("nodeId"), nodeId);
    paramsObject->setNumber(ASCIILiteral("childNodeCount"), childNodeCount);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::childNodeInserted(int parentNodeId, int previousNodeId, PassRefPtr<Inspector::TypeBuilder::DOM::Node> node)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.childNodeInserted"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("parentNodeId"), parentNodeId);
    paramsObject->setNumber(ASCIILiteral("previousNodeId"), previousNodeId);
    paramsObject->setValue(ASCIILiteral("node"), node);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::childNodeRemoved(int parentNodeId, int nodeId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.childNodeRemoved"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("parentNodeId"), parentNodeId);
    paramsObject->setNumber(ASCIILiteral("nodeId"), nodeId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::shadowRootPushed(int hostId, PassRefPtr<Inspector::TypeBuilder::DOM::Node> root)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.shadowRootPushed"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("hostId"), hostId);
    paramsObject->setValue(ASCIILiteral("root"), root);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMFrontendDispatcher::shadowRootPopped(int hostId, int rootId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOM.shadowRootPopped"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("hostId"), hostId);
    paramsObject->setNumber(ASCIILiteral("rootId"), rootId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMStorageFrontendDispatcher::domStorageItemsCleared(PassRefPtr<Inspector::TypeBuilder::DOMStorage::StorageId> storageId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOMStorage.domStorageItemsCleared"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("storageId"), storageId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMStorageFrontendDispatcher::domStorageItemRemoved(PassRefPtr<Inspector::TypeBuilder::DOMStorage::StorageId> storageId, const String& key)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOMStorage.domStorageItemRemoved"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("storageId"), storageId);
    paramsObject->setString(ASCIILiteral("key"), key);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMStorageFrontendDispatcher::domStorageItemAdded(PassRefPtr<Inspector::TypeBuilder::DOMStorage::StorageId> storageId, const String& key, const String& newValue)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOMStorage.domStorageItemAdded"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("storageId"), storageId);
    paramsObject->setString(ASCIILiteral("key"), key);
    paramsObject->setString(ASCIILiteral("newValue"), newValue);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorDOMStorageFrontendDispatcher::domStorageItemUpdated(PassRefPtr<Inspector::TypeBuilder::DOMStorage::StorageId> storageId, const String& key, const String& oldValue, const String& newValue)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("DOMStorage.domStorageItemUpdated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("storageId"), storageId);
    paramsObject->setString(ASCIILiteral("key"), key);
    paramsObject->setString(ASCIILiteral("oldValue"), oldValue);
    paramsObject->setString(ASCIILiteral("newValue"), newValue);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

#if ENABLE(SQL_DATABASE)

void InspectorDatabaseFrontendDispatcher::addDatabase(PassRefPtr<Inspector::TypeBuilder::Database::Database> database)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Database.addDatabase"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("database"), database);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

#endif // ENABLE(SQL_DATABASE)

void InspectorHeapProfilerFrontendDispatcher::addProfileHeader(PassRefPtr<Inspector::TypeBuilder::HeapProfiler::ProfileHeader> header)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("HeapProfiler.addProfileHeader"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("header"), header);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorHeapProfilerFrontendDispatcher::addHeapSnapshotChunk(int uid, const String& chunk)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("HeapProfiler.addHeapSnapshotChunk"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("uid"), uid);
    paramsObject->setString(ASCIILiteral("chunk"), chunk);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorHeapProfilerFrontendDispatcher::finishHeapSnapshot(int uid)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("HeapProfiler.finishHeapSnapshot"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("uid"), uid);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorHeapProfilerFrontendDispatcher::resetProfiles()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("HeapProfiler.resetProfiles"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorHeapProfilerFrontendDispatcher::reportHeapSnapshotProgress(int done, int total)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("HeapProfiler.reportHeapSnapshotProgress"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("done"), done);
    paramsObject->setNumber(ASCIILiteral("total"), total);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorLayerTreeFrontendDispatcher::layerTreeDidChange()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("LayerTree.layerTreeDidChange"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::requestWillBeSent(const Inspector::TypeBuilder::Network::RequestId& requestId, const Inspector::TypeBuilder::Network::FrameId& frameId, const Inspector::TypeBuilder::Network::LoaderId& loaderId, const String& documentURL, PassRefPtr<Inspector::TypeBuilder::Network::Request> request, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::Initiator> initiator, PassRefPtr<Inspector::TypeBuilder::Network::Response> redirectResponse, Inspector::TypeBuilder::Page::ResourceType::Enum* type)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.requestWillBeSent"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    paramsObject->setString(ASCIILiteral("loaderId"), loaderId);
    paramsObject->setString(ASCIILiteral("documentURL"), documentURL);
    paramsObject->setValue(ASCIILiteral("request"), request);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("initiator"), initiator);
    if (redirectResponse)
        paramsObject->setValue(ASCIILiteral("redirectResponse"), redirectResponse);
    if (type)
        paramsObject->setString(ASCIILiteral("type"), Inspector::TypeBuilder::getWebEnumConstantValue(*type));
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::requestServedFromCache(const Inspector::TypeBuilder::Network::RequestId& requestId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.requestServedFromCache"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::responseReceived(const Inspector::TypeBuilder::Network::RequestId& requestId, const Inspector::TypeBuilder::Network::FrameId& frameId, const Inspector::TypeBuilder::Network::LoaderId& loaderId, double timestamp, Inspector::TypeBuilder::Page::ResourceType::Enum type, PassRefPtr<Inspector::TypeBuilder::Network::Response> response)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.responseReceived"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    paramsObject->setString(ASCIILiteral("loaderId"), loaderId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setString(ASCIILiteral("type"), Inspector::TypeBuilder::getWebEnumConstantValue(type));
    paramsObject->setValue(ASCIILiteral("response"), response);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::dataReceived(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, int dataLength, int encodedDataLength)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.dataReceived"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setNumber(ASCIILiteral("dataLength"), dataLength);
    paramsObject->setNumber(ASCIILiteral("encodedDataLength"), encodedDataLength);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::loadingFinished(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, const String* const sourceMapURL)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.loadingFinished"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    if (sourceMapURL)
        paramsObject->setString(ASCIILiteral("sourceMapURL"), *sourceMapURL);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::loadingFailed(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, const String& errorText, const bool* const canceled)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.loadingFailed"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setString(ASCIILiteral("errorText"), errorText);
    if (canceled)
        paramsObject->setBoolean(ASCIILiteral("canceled"), *canceled);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::requestServedFromMemoryCache(const Inspector::TypeBuilder::Network::RequestId& requestId, const Inspector::TypeBuilder::Network::FrameId& frameId, const Inspector::TypeBuilder::Network::LoaderId& loaderId, const String& documentURL, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::Initiator> initiator, PassRefPtr<Inspector::TypeBuilder::Network::CachedResource> resource)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.requestServedFromMemoryCache"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    paramsObject->setString(ASCIILiteral("loaderId"), loaderId);
    paramsObject->setString(ASCIILiteral("documentURL"), documentURL);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("initiator"), initiator);
    paramsObject->setValue(ASCIILiteral("resource"), resource);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketWillSendHandshakeRequest(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::WebSocketRequest> request)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketWillSendHandshakeRequest"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("request"), request);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketHandshakeResponseReceived(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::WebSocketResponse> response)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketHandshakeResponseReceived"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("response"), response);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketCreated(const Inspector::TypeBuilder::Network::RequestId& requestId, const String& url)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketCreated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setString(ASCIILiteral("url"), url);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketClosed(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketClosed"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketFrameReceived(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::WebSocketFrame> response)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketFrameReceived"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("response"), response);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketFrameError(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, const String& errorMessage)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketFrameError"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setString(ASCIILiteral("errorMessage"), errorMessage);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorNetworkFrontendDispatcher::webSocketFrameSent(const Inspector::TypeBuilder::Network::RequestId& requestId, double timestamp, PassRefPtr<Inspector::TypeBuilder::Network::WebSocketFrame> response)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Network.webSocketFrameSent"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("requestId"), requestId);
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    paramsObject->setValue(ASCIILiteral("response"), response);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::domContentEventFired(double timestamp)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.domContentEventFired"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::loadEventFired(double timestamp)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.loadEventFired"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("timestamp"), timestamp);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameNavigated(PassRefPtr<Inspector::TypeBuilder::Page::Frame> frame)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameNavigated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("frame"), frame);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameDetached(const Inspector::TypeBuilder::Network::FrameId& frameId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameDetached"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameStartedLoading(const Inspector::TypeBuilder::Network::FrameId& frameId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameStartedLoading"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameStoppedLoading(const Inspector::TypeBuilder::Network::FrameId& frameId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameStoppedLoading"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameScheduledNavigation(const Inspector::TypeBuilder::Network::FrameId& frameId, double delay)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameScheduledNavigation"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    paramsObject->setNumber(ASCIILiteral("delay"), delay);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::frameClearedScheduledNavigation(const Inspector::TypeBuilder::Network::FrameId& frameId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.frameClearedScheduledNavigation"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("frameId"), frameId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::javascriptDialogOpening(const String& message)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.javascriptDialogOpening"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setString(ASCIILiteral("message"), message);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::javascriptDialogClosed()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.javascriptDialogClosed"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorPageFrontendDispatcher::scriptsEnabled(bool isEnabled)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Page.scriptsEnabled"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setBoolean(ASCIILiteral("isEnabled"), isEnabled);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

#if ENABLE(JAVASCRIPT_DEBUGGER)

void InspectorProfilerFrontendDispatcher::addProfileHeader(PassRefPtr<Inspector::TypeBuilder::Profiler::ProfileHeader> header)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.addProfileHeader"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("header"), header);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorProfilerFrontendDispatcher::addHeapSnapshotChunk(int uid, const String& chunk)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.addHeapSnapshotChunk"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("uid"), uid);
    paramsObject->setString(ASCIILiteral("chunk"), chunk);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorProfilerFrontendDispatcher::finishHeapSnapshot(int uid)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.finishHeapSnapshot"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("uid"), uid);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorProfilerFrontendDispatcher::setRecordingProfile(bool isProfiling)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.setRecordingProfile"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setBoolean(ASCIILiteral("isProfiling"), isProfiling);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorProfilerFrontendDispatcher::resetProfiles()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.resetProfiles"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorProfilerFrontendDispatcher::reportHeapSnapshotProgress(int done, int total)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Profiler.reportHeapSnapshotProgress"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("done"), done);
    paramsObject->setNumber(ASCIILiteral("total"), total);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

#endif // ENABLE(JAVASCRIPT_DEBUGGER)

void InspectorTimelineFrontendDispatcher::eventRecorded(PassRefPtr<Inspector::TypeBuilder::Timeline::TimelineEvent> record)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Timeline.eventRecorded"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setValue(ASCIILiteral("record"), record);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorWorkerFrontendDispatcher::workerCreated(int workerId, const String& url, bool inspectorConnected)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Worker.workerCreated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("workerId"), workerId);
    paramsObject->setString(ASCIILiteral("url"), url);
    paramsObject->setBoolean(ASCIILiteral("inspectorConnected"), inspectorConnected);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorWorkerFrontendDispatcher::workerTerminated(int workerId)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Worker.workerTerminated"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("workerId"), workerId);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorWorkerFrontendDispatcher::dispatchMessageFromWorker(int workerId, PassRefPtr<Inspector::InspectorObject> message)
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Worker.dispatchMessageFromWorker"));
    RefPtr<InspectorObject> paramsObject = InspectorObject::create();
    paramsObject->setNumber(ASCIILiteral("workerId"), workerId);
    paramsObject->setValue(ASCIILiteral("message"), message);
    jsonMessage->setObject(ASCIILiteral("params"), paramsObject);

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}

void InspectorWorkerFrontendDispatcher::disconnectedFromWorker()
{
    RefPtr<InspectorObject> jsonMessage = InspectorObject::create();
    jsonMessage->setString(ASCIILiteral("method"), ASCIILiteral("Worker.disconnectedFromWorker"));

    m_inspectorFrontendChannel->sendMessageToFrontend(jsonMessage->toJSONString());
}


} // namespace Inspector

#endif // ENABLE(INSPECTOR)
