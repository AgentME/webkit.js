// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET, parentModule) {
  var Module = {};
  var args = [];
  Module.arguments = [];
  Module.print = parentModule.print;
  Module.printErr = parentModule.printErr;
  Module.cleanups = [];
  var H_BASE = 0;
  // Each module has its own stack
  var STACKTOP = parentModule['_malloc'](TOTAL_STACK);
  assert(STACKTOP % 8 == 0);
  var STACK_MAX = STACKTOP + TOTAL_STACK;
  Module.cleanups.push(function() {
    parentModule['_free'](STACKTOP); // XXX ensure exported
    parentModule['_free'](H_BASE);
  });
// === Auto-generated preamble library stuff ===
//========================================
// Runtime essentials
//========================================
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.pop();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}
var __ATINIT__ = []; // functions called during startup
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
// === Body ===
H_BASE = parentModule["_malloc"](5864 + Runtime.GLOBAL_BASE);
// STATICTOP = STATIC_BASE + 5864;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
/* memory initializer */ allocate([112,97,108,101,103,114,101,101,110,0,0,0,0,0,0,0,105,118,111,114,121,0,0,0,99,104,97,114,116,114,101,117,115,101,0,0,0,0,0,0,110,97,118,121,0,0,0,0,109,111,99,99,97,115,105,110,0,0,0,0,0,0,0,0,121,101,108,108,111,119,103,114,101,101,110,0,0,0,0,0,99,104,111,99,111,108,97,116,101,0,0,0,0,0,0,0,97,108,105,99,101,98,108,117,101,0,0,0,0,0,0,0,119,104,105,116,101,0,0,0,108,97,119,110,103,114,101,101,110,0,0,0,0,0,0,0,103,114,97,121,0,0,0,0,119,104,101,97,116,0,0,0,99,97,100,101,116,98,108,117,101,0,0,0,0,0,0,0,108,105,103,104,116,98,108,117,101,0,0,0,0,0,0,0,112,105,110,107,0,0,0,0,104,111,110,101,121,100,101,119,0,0,0,0,0,0,0,0,115,97,100,100,108,101,98,114,111,119,110,0,0,0,0,0,97,113,117,97,109,97,114,105,110,101,0,0,0,0,0,0,109,105,110,116,99,114,101,97,109,0,0,0,0,0,0,0,108,105,103,104,116,99,111,114,97,108,0,0,0,0,0,0,121,101,108,108,111,119,0,0,103,114,101,101,110,0,0,0,100,97,114,107,115,108,97,116,101,98,108,117,101,0,0,0,115,97,110,100,121,98,114,111,119,110,0,0,0,0,0,0,114,111,115,121,98,114,111,119,110,0,0,0,0,0,0,0,108,105,103,104,116,99,121,97,110,0,0,0,0,0,0,0,115,110,111,119,0,0,0,0,108,105,103,104,116,115,97,108,109,111,110,0,0,0,0,0,98,114,111,119,110,0,0,0,108,105,103,104,116,115,108,97,116,101,103,114,97,121,0,0,108,105,103,104,116,115,108,97,116,101,103,114,101,121,0,0,108,105,103,104,116,115,101,97,103,114,101,101,110,0,0,0,103,114,101,121,0,0,0,0,98,108,97,110,99,104,101,100,97,108,109,111,110,100,0,0,100,111,100,103,101,114,98,108,117,101,0,0,0,0,0,0,115,108,97,116,101,98,108,117,101,0,0,0,0,0,0,0,99,114,105,109,115,111,110,0,98,105,115,113,117,101,0,0,115,116,101,101,108,98,108,117,101,0,0,0,0,0,0,0,97,113,117,97,0,0,0,0,114,111,121,97,108,98,108,117,101,0,0,0,0,0,0,0,100,97,114,107,111,114,99,104,105,100,0,0,0,0,0,0,108,105,103,104,116,103,114,97,121,0,0,0,0,0,0,0,116,101,97,108,0,0,0,0,108,105,103,104,116,121,101,108,108,111,119,0,0,0,0,0,108,105,103,104,116,103,114,101,101,110,0,0,0,0,0,0,108,105,103,104,116,103,114,101,121,0,0,0,0,0,0,0,111,114,99,104,105,100,0,0,102,105,114,101,98,114,105,99,107,0,0,0,0,0,0,0,115,107,121,98,108,117,101,0,100,97,114,107,98,108,117,101,0,0,0,0,0,0,0,0,99,111,114,110,115,105,108,107,0,0,0,0,0,0,0,0,111,108,100,108,97,99,101,0,98,108,117,101,0,0,0,0,105,110,100,105,97,110,114,101,100,0,0,0,0,0,0,0,97,122,117,114,101,0,0,0,100,97,114,107,109,97,103,101,110,116,97,0,0,0,0,0,99,111,114,97,108,0,0,0,108,105,109,101,103,114,101,101,110,0,0,0,0,0,0,0,109,97,103,101,110,116,97,0,98,108,97,99,107,0,0,0,100,97,114,107,99,121,97,110,0,0,0,0,0,0,0,0,100,105,109,103,114,97,121,0,109,105,115,116,121,114,111,115,101,0,0,0,0,0,0,0,100,97,114,107,115,108,97,116,101,103,114,97,121,0,0,0,115,105,101,110,110,97,0,0,100,105,109,103,114,101,121,0,102,111,114,101,115,116,103,114,101,101,110,0,0,0,0,0,99,121,97,110,0,0,0,0,100,97,114,107,115,108,97,116,101,103,114,101,121,0,0,0,116,104,105,115,116,108,101,0,116,111,109,97,116,111,0,0,100,97,114,107,115,97,108,109,111,110,0,0,0,0,0,0,115,101,97,115,104,101,108,108,0,0,0,0,0,0,0,0,100,97,114,107,115,101,97,103,114,101,101,110,0,0,0,0,115,97,108,109,111,110,0,0,108,105,110,101,110,0,0,0,115,108,97,116,101,103,114,97,121,0,0,0,0,0,0,0,115,108,97,116,101,103,114,101,121,0,0,0,0,0,0,0,100,97,114,107,103,111,108,100,101,110,114,111,100,0,0,0,103,114,101,101,110,121,101,108,108,111,119,0,0,0,0,0,108,105,109,101,0,0,0,0,103,97,105,110,115,98,111,114,111,0,0,0,0,0,0,0,109,97,114,111,111,110,0,0,103,111,108,100,101,110,114,111,100,0,0,0,0,0,0,0,105,110,100,105,103,111,0,0,100,97,114,107,107,104,97,107,105,0,0,0,0,0,0,0,116,97,110,0,0,0,0,0,100,97,114,107,111,114,97,110,103,101,0,0,0,0,0,0,103,111,108,100,0,0,0,0,115,101,97,103,114,101,101,110,0,0,0,0,0,0,0,0,107,104,97,107,105,0,0,0,111,114,97,110,103,101,114,101,100,0,0,0,0,0,0,0,112,97,112,97,121,97,119,104,105,112,0,0,0,0,0,0,109,101,100,105,117,109,112,117,114,112,108,101,0,0,0,0,112,101,97,99,104,112,117,102,102,0,0,0,0,0,0,0,109,101,100,105,117,109,116,117,114,113,117,111,105,115,101,0,108,97,118,101,110,100,101,114,98,108,117,115,104,0,0,0,112,117,114,112,108,101,0,0,109,101,100,105,117,109,118,105,111,108,101,116,114,101,100,0,112,97,108,101,118,105,111,108,101,116,114,101,100,0,0,0,99,111,114,110,102,108,111,119,101,114,98,108,117,101,0,0,109,101,100,105,117,109,115,112,114,105,110,103,103,114,101,101,110,0,0,0,0,0,0,0,100,97,114,107,103,114,97,121,0,0,0,0,0,0,0,0,110,97,118,97,106,111,119,104,105,116,101,0,0,0,0,0,112,111,119,100,101,114,98,108,117,101,0,0,0,0,0,0,112,97,108,101,116,117,114,113,117,111,105,115,101,0,0,0,97,110,116,105,113,117,101,119,104,105,116,101,0,0,0,0,108,101,109,111,110,99,104,105,102,102,111,110,0,0,0,0,100,101,101,112,112,105,110,107,0,0,0,0,0,0,0,0,109,105,100,110,105,103,104,116,98,108,117,101,0,0,0,0,98,108,117,101,118,105,111,108,101,116,0,0,0,0,0,0,109,101,100,105,117,109,115,108,97,116,101,98,108,117,101,0,109,101,100,105,117,109,97,113,117,97,109,97,114,105,110,101,0,0,0,0,0,0,0,0,111,114,97,110,103,101,0,0,112,108,117,109,0,0,0,0,108,105,103,104,116,103,111,108,100,101,110,114,111,100,121,101,108,108,111,119,0,0,0,0,108,105,103,104,116,115,107,121,98,108,117,101,0,0,0,0,100,101,101,112,115,107,121,98,108,117,101,0,0,0,0,0,116,114,97,110,115,112,97,114,101,110,116,0,0,0,0,0,108,105,103,104,116,115,108,97,116,101,98,108,117,101,0,0,108,105,103,104,116,115,116,101,101,108,98,108,117,101,0,0,109,101,100,105,117,109,111,114,99,104,105,100,0,0,0,0,109,101,100,105,117,109,98,108,117,101,0,0,0,0,0,0,103,104,111,115,116,119,104,105,116,101,0,0,0,0,0,0,98,101,105,103,101,0,0,0,100,97,114,107,111,108,105,118,101,103,114,101,101,110,0,0,108,105,103,104,116,112,105,110,107,0,0,0,0,0,0,0,102,108,111,114,97,108,119,104,105,116,101,0,0,0,0,0,112,101,114,117,0,0,0,0,98,117,114,108,121,119,111,111,100,0,0,0,0,0,0,0,115,112,114,105,110,103,103,114,101,101,110,0,0,0,0,0,119,104,105,116,101,115,109,111,107,101,0,0,0,0,0,0,112,97,108,101,103,111,108,100,101,110,114,111,100,0,0,0,100,97,114,107,118,105,111,108,101,116,0,0,0,0,0,0,118,105,111,108,101,116,114,101,100,0,0,0,0,0,0,0,100,97,114,107,103,114,101,101,110,0,0,0,0,0,0,0,118,105,111,108,101,116,0,0,116,117,114,113,117,111,105,115,101,0,0,0,0,0,0,0,100,97,114,107,116,117,114,113,117,111,105,115,101,0,0,0,111,108,105,118,101,100,114,97,98,0,0,0,0,0,0,0,115,105,108,118,101,114,0,0,109,101,100,105,117,109,115,101,97,103,114,101,101,110,0,0,102,117,99,104,115,105,97,0,111,108,105,118,101,0,0,0,104,111,116,112,105,110,107,0,108,97,118,101,110,100,101,114,0,0,0,0,0,0,0,0,100,97,114,107,103,114,101,121,0,0,0,0,0,0,0,0,100,97,114,107,114,101,100,0,114,101,100,0,0,0,0,0,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,5,0,0,0,105,0,0,0,0,0,30,0,40,0,40,0,10,0,0,0,0,0,15,0,60,0,0,0,5,0,255,0,40,0,0,0,10,0,15,0,130,0,44,1,215,0,5,0,0,0,0,0,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,32,4,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,139,255,0,0,0,0,140,180,210,255,0,0,0,0,230,240,250,255,0,0,0,0,45,82,160,255,0,0,0,0,92,92,205,255,0,0,0,0,128,128,0,255,0,0,0,0,128,128,128,255,0,0,0,0,0,128,0,255,0,0,0,0,128,128,128,255,0,0,0,0,169,169,169,255,0,0,0,0,0,100,0,255,0,0,0,0,220,245,245,255,0,0,0,0,0,165,255,255,0,0,0,0,169,169,169,255,0,0,0,0,0,69,255,255,0,0,0,0,140,230,240,255,0,0,0,0,87,139,46,255,0,0,0,0,0,215,255,255,0,0,0,0,0,140,255,255,0,0,0,0,107,183,189,255,0,0,0,0,130,0,75,255,0,0,0,0,32,165,218,255,0,0,0,0,0,0,128,255,0,0,0,0,220,220,220,255,0,0,0,0,0,255,0,255,0,0,0,0,47,255,173,255,0,0,0,0,11,134,184,255,0,0,0,0,144,128,112,255,0,0,0,0,144,128,112,255,0,0,0,0,114,128,250,255,0,0,0,0,143,188,143,255,0,0,0,0,238,245,255,255,0,0,0,0,122,150,233,255,0,0,0,0,71,99,255,255,0,0,0,0,216,191,216,255,0,0,0,0,79,79,47,255,0,0,0,0,255,255,0,255,0,0,0,0,34,139,34,255,0,0,0,0,105,105,105,255,0,0,0,0,79,79,47,255,0,0,0,0,225,228,255,255,0,0,0,0,105,105,105,255,0,0,0,0,139,139,0,255,0,0,0,0,0,0,0,255,0,0,0,0,255,0,255,255,0,0,0,0,50,205,50,255,0,0,0,0,80,127,255,255,0,0,0,0,139,0,139,255,0,0,0,0,255,255,240,255,0,0,0,0,255,0,0,255,0,0,0,0,230,245,253,255,0,0,0,0,220,248,255,255,0,0,0,0,139,0,0,255,0,0,0,0,235,206,135,255,0,0,0,0,34,34,178,255,0,0,0,0,214,112,218,255,0,0,0,0,211,211,211,255,0,0,0,0,144,238,144,255,0,0,0,0,224,255,255,255,0,0,0,0,211,211,211,255,0,0,0,0,204,50,153,255,0,0,0,0,225,105,65,255,0,0,0,0,255,255,0,255,0,0,0,0,180,130,70,255,0,0,0,0,196,228,255,255,0,0,0,0,60,20,220,255,0,0,0,0,205,90,106,255,0,0,0,0,255,144,30,255,0,0,0,0,205,235,255,255,0,0,0,0,170,178,32,255,0,0,0,0,153,136,119,255,0,0,0,0,153,136,119,255,0,0,0,0,42,42,165,255,0,0,0,0,122,160,255,255,0,0,0,0,250,250,255,255,0,0,0,0,255,255,224,255,0,0,0,0,143,143,188,255,0,0,0,0,96,164,244,255,0,0,0,0,139,61,72,255,0,0,0,0,0,255,255,255,0,0,0,0,128,128,240,255,0,0,0,0,250,255,245,255,0,0,0,0,212,255,127,255,0,0,0,0,19,69,139,255,0,0,0,0,240,255,240,255,0,0,0,0,203,192,255,255,0,0,0,0,230,216,173,255,0,0,0,0,160,158,95,255,0,0,0,0,179,222,245,255,0,0,0,0,0,252,124,255,0,0,0,0,255,255,255,255,0,0,0,0,255,248,240,255,0,0,0,0,30,105,210,255,0,0,0,0,50,205,154,255,0,0,0,0,181,228,255,255,0,0,0,0,128,0,0,255,0,0,0,0,0,255,127,255,0,0,0,0,240,255,255,255,0,0,0,0,152,251,152,255,0,0,0,0,250,230,230,255,0,0,0,0,180,105,255,255,0,0,0,0,0,128,128,255,0,0,0,0,255,0,255,255,0,0,0,0,113,179,60,255,0,0,0,0,192,192,192,255,0,0,0,0,35,142,107,255,0,0,0,0,209,206,0,255,0,0,0,0,208,224,64,255,0,0,0,0,238,130,238,255,0,0,0,0,144,32,208,255,0,0,0,0,211,0,148,255,0,0,0,0,170,232,238,255,0,0,0,0,245,245,245,255,0,0,0,0,127,255,0,255,0,0,0,0,135,184,222,255,0,0,0,0,63,133,205,255,0,0,0,0,240,250,255,255,0,0,0,0,193,182,255,255,0,0,0,0,47,107,85,255,0,0,0,0,255,248,248,255,0,0,0,0,205,0,0,255,0,0,0,0,211,85,186,255,0,0,0,0,222,196,176,255,0,0,0,0,255,112,132,255,0,0,0,0,0,0,0,0,0,0,0,0,255,191,0,255,0,0,0,0,250,206,135,255,0,0,0,0,210,250,250,255,0,0,0,0,221,160,221,255,0,0,0,0,170,205,102,255,0,0,0,0,238,104,123,255,0,0,0,0,226,43,138,255,0,0,0,0,112,25,25,255,0,0,0,0,147,20,255,255,0,0,0,0,205,250,255,255,0,0,0,0,215,235,250,255,0,0,0,0,238,238,175,255,0,0,0,0,230,224,176,255,0,0,0,0,173,222,255,255,0,0,0,0,154,250,0,255,0,0,0,0,237,149,100,255,0,0,0,0,147,112,219,255,0,0,0,0,133,21,199,255,0,0,0,0,128,0,128,255,0,0,0,0,245,240,255,255,0,0,0,0,204,209,72,255,0,0,0,0,185,218,255,255,0,0,0,0,219,112,147,255,0,0,0,0,213,239,255,255,255,255,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,255,255,255,255,5,0,255,255,255,255,255,255,255,255,6,0,255,255,255,255,255,255,255,255,7,0,8,0,255,255,255,255,255,255,9,0,255,255,255,255,255,255,10,0,11,0,12,0,13,0,255,255,14,0,15,0,16,0,255,255,255,255,17,0,18,0,19,0,255,255,255,255,255,255,20,0,255,255,21,0,255,255,255,255,22,0,255,255,255,255,255,255,255,255,255,255,255,255,23,0,255,255,255,255,24,0,255,255,255,255,255,255,255,255,25,0,255,255,26,0,255,255,27,0,28,0,255,255,255,255,255,255,255,255,29,0,255,255,30,0,31,0,32,0,255,255,255,255,255,255,255,255,255,255,255,255,33,0,34,0,35,0,36,0,37,0,255,255,38,0,39,0,40,0,41,0,255,255,255,255,42,0,43,0,255,255,255,255,255,255,255,255,255,255,255,255,44,0,255,255,45,0,255,255,46,0,47,0,48,0,255,255,255,255,255,255,49,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,50,0,255,255,255,255,51,0,52,0,255,255,255,255,255,255,255,255,53,0,255,255,255,255,255,255,54,0,255,255,55,0,255,255,56,0,255,255,255,255,57,0,58,0,59,0,255,255,255,255,60,0,61,0,255,255,255,255,255,255,62,0,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,64,0,255,255,65,0,66,0,255,255,67,0,68,0,255,255,255,255,255,255,69,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,70,0,71,0,255,255,255,255,255,255,255,255,72,0,73,0,255,255,255,255,255,255,255,255,255,255,74,0,255,255,255,255,75,0,255,255,255,255,255,255,255,255,76,0,255,255,255,255,255,255,255,255,77,0,78,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,79,0,255,255,255,255,80,0,255,255,255,255,255,255,81,0,255,255,255,255,255,255,82,0,83,0,84,0,255,255,85,0,86,0,255,255,255,255,255,255,255,255,87,0,255,255,255,255,255,255,255,255,88,0,89,0,255,255,255,255,255,255,90,0,91,0,255,255,255,255,255,255,92,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,93,0,255,255,94,0,255,255,95,0,96,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,99,0,255,255,255,255,255,255,100,0,255,255,255,255,255,255,101,0,255,255,255,255,102,0,255,255,103,0,255,255,104,0,255,255,105,0,255,255,255,255,106,0,255,255,255,255,255,255,107,0,108,0,255,255,109,0,255,255,255,255,110,0,255,255,255,255,255,255,255,255,255,255,111,0,255,255,255,255,112,0,255,255,113,0,255,255,255,255,255,255,255,255,255,255,114,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,115,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,255,255,117,0,255,255,255,255,118,0,255,255,255,255,255,255,255,255,119,0,120,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,121,0,255,255,255,255,255,255,255,255,255,255,255,255,122,0,255,255,123,0,255,255,255,255,255,255,255,255,124,0,255,255,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,255,255,128,0,255,255,255,255,255,255,129,0,255,255,255,255,255,255,255,255,255,255,255,255,130,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,131,0,255,255,255,255,255,255,255,255,132,0,255,255,133,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,134,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,135,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,136,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,137,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,138,0,255,255,255,255,255,255,255,255,255,255,139,0,140,0,255,255,141,0,255,255,255,255,255,255,142,0,255,255,255,255,255,255,255,255,255,255,255,255,143,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,146,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,148,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+H_BASE)
;
;
;
;
;
;
;
var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __ZZN7WebCore13ColorDataHash23colordata_hash_functionEPKcjE11asso_values=(H_BASE+2040)|0;
  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_vi=env.invoke_vi;
  var _strncmp=env._strncmp;
  var _malloc=env._malloc;
  var ___setErrNo=env.___setErrNo;
  var _free=env._free;
  var _fflush=env._fflush;
  var tempFloat = 0.0;
// EMSCRIPTEN_START_FUNCS
function runPostSets() {
 HEAP32[H_BASE + 2560 >> 2] = H_BASE + 2032;
 HEAP32[H_BASE + 2568 >> 2] = H_BASE + 2024;
 HEAP32[H_BASE + 2576 >> 2] = H_BASE + 1128;
 HEAP32[H_BASE + 2584 >> 2] = H_BASE + 984;
 HEAP32[H_BASE + 2592 >> 2] = H_BASE + 856;
 HEAP32[H_BASE + 2600 >> 2] = H_BASE + 720;
 HEAP32[H_BASE + 2608 >> 2] = H_BASE + 584;
 HEAP32[H_BASE + 2616 >> 2] = H_BASE + 440;
 HEAP32[H_BASE + 2624 >> 2] = H_BASE + 288;
 HEAP32[H_BASE + 2632 >> 2] = H_BASE + 144;
 HEAP32[H_BASE + 2640 >> 2] = H_BASE + 2008;
 HEAP32[H_BASE + 2648 >> 2] = H_BASE + 1872;
 HEAP32[H_BASE + 2656 >> 2] = H_BASE + 1712;
 HEAP32[H_BASE + 2664 >> 2] = H_BASE + 1544;
 HEAP32[H_BASE + 2672 >> 2] = H_BASE + 1360;
 HEAP32[H_BASE + 2680 >> 2] = H_BASE + 1184;
 HEAP32[H_BASE + 2688 >> 2] = H_BASE + 1176;
 HEAP32[H_BASE + 2696 >> 2] = H_BASE + 1160;
 HEAP32[H_BASE + 2704 >> 2] = H_BASE + 1152;
 HEAP32[H_BASE + 2712 >> 2] = H_BASE + 1136;
 HEAP32[H_BASE + 2720 >> 2] = H_BASE + 1112;
 HEAP32[H_BASE + 2728 >> 2] = H_BASE + 1104;
 HEAP32[H_BASE + 2736 >> 2] = H_BASE + 1088;
 HEAP32[H_BASE + 2744 >> 2] = H_BASE + 1080;
 HEAP32[H_BASE + 2752 >> 2] = H_BASE + 1064;
 HEAP32[H_BASE + 2760 >> 2] = H_BASE + 1056;
 HEAP32[H_BASE + 2768 >> 2] = H_BASE + 1040;
 HEAP32[H_BASE + 2776 >> 2] = H_BASE + 1024;
 HEAP32[H_BASE + 2784 >> 2] = H_BASE + 1008;
 HEAP32[H_BASE + 2792 >> 2] = H_BASE + 992;
 HEAP32[H_BASE + 2800 >> 2] = H_BASE + 976;
 HEAP32[H_BASE + 2808 >> 2] = H_BASE + 960;
 HEAP32[H_BASE + 2816 >> 2] = H_BASE + 944;
 HEAP32[H_BASE + 2824 >> 2] = H_BASE + 928;
 HEAP32[H_BASE + 2832 >> 2] = H_BASE + 920;
 HEAP32[H_BASE + 2840 >> 2] = H_BASE + 912;
 HEAP32[H_BASE + 2848 >> 2] = H_BASE + 896;
 HEAP32[H_BASE + 2856 >> 2] = H_BASE + 888;
 HEAP32[H_BASE + 2864 >> 2] = H_BASE + 872;
 HEAP32[H_BASE + 2872 >> 2] = H_BASE + 864;
 HEAP32[H_BASE + 2880 >> 2] = H_BASE + 840;
 HEAP32[H_BASE + 2888 >> 2] = H_BASE + 824;
 HEAP32[H_BASE + 2896 >> 2] = H_BASE + 816;
 HEAP32[H_BASE + 2904 >> 2] = H_BASE + 800;
 HEAP32[H_BASE + 2912 >> 2] = H_BASE + 792;
 HEAP32[H_BASE + 2920 >> 2] = H_BASE + 784;
 HEAP32[H_BASE + 2928 >> 2] = H_BASE + 768;
 HEAP32[H_BASE + 2936 >> 2] = H_BASE + 760;
 HEAP32[H_BASE + 2944 >> 2] = H_BASE + 744;
 HEAP32[H_BASE + 2952 >> 2] = H_BASE + 736;
 HEAP32[H_BASE + 2960 >> 2] = H_BASE + 712;
 HEAP32[H_BASE + 2968 >> 2] = H_BASE + 704;
 HEAP32[H_BASE + 2976 >> 2] = H_BASE + 688;
 HEAP32[H_BASE + 2984 >> 2] = H_BASE + 672;
 HEAP32[H_BASE + 2992 >> 2] = H_BASE + 664;
 HEAP32[H_BASE + 3e3 >> 2] = H_BASE + 648;
 HEAP32[H_BASE + 3008 >> 2] = H_BASE + 640;
 HEAP32[H_BASE + 3016 >> 2] = H_BASE + 624;
 HEAP32[H_BASE + 3024 >> 2] = H_BASE + 608;
 HEAP32[H_BASE + 3032 >> 2] = H_BASE + 592;
 HEAP32[H_BASE + 3040 >> 2] = H_BASE + 568;
 HEAP32[H_BASE + 3048 >> 2] = H_BASE + 552;
 HEAP32[H_BASE + 3056 >> 2] = H_BASE + 536;
 HEAP32[H_BASE + 3064 >> 2] = H_BASE + 528;
 HEAP32[H_BASE + 3072 >> 2] = H_BASE + 512;
 HEAP32[H_BASE + 3080 >> 2] = H_BASE + 504;
 HEAP32[H_BASE + 3088 >> 2] = H_BASE + 496;
 HEAP32[H_BASE + 3096 >> 2] = H_BASE + 480;
 HEAP32[H_BASE + 3104 >> 2] = H_BASE + 464;
 HEAP32[H_BASE + 3112 >> 2] = H_BASE + 448;
 HEAP32[H_BASE + 3120 >> 2] = H_BASE + 424;
 HEAP32[H_BASE + 3128 >> 2] = H_BASE + 408;
 HEAP32[H_BASE + 3136 >> 2] = H_BASE + 392;
 HEAP32[H_BASE + 3144 >> 2] = H_BASE + 384;
 HEAP32[H_BASE + 3152 >> 2] = H_BASE + 368;
 HEAP32[H_BASE + 3160 >> 2] = H_BASE + 360;
 HEAP32[H_BASE + 3168 >> 2] = H_BASE + 344;
 HEAP32[H_BASE + 3176 >> 2] = H_BASE + 328;
 HEAP32[H_BASE + 3184 >> 2] = H_BASE + 312;
 HEAP32[H_BASE + 3192 >> 2] = H_BASE + 296;
 HEAP32[H_BASE + 3200 >> 2] = H_BASE + 280;
 HEAP32[H_BASE + 3208 >> 2] = H_BASE + 264;
 HEAP32[H_BASE + 3216 >> 2] = H_BASE + 248;
 HEAP32[H_BASE + 3224 >> 2] = H_BASE + 232;
 HEAP32[H_BASE + 3232 >> 2] = H_BASE + 216;
 HEAP32[H_BASE + 3240 >> 2] = H_BASE + 200;
 HEAP32[H_BASE + 3248 >> 2] = H_BASE + 192;
 HEAP32[H_BASE + 3256 >> 2] = H_BASE + 176;
 HEAP32[H_BASE + 3264 >> 2] = H_BASE + 160;
 HEAP32[H_BASE + 3272 >> 2] = H_BASE + 152;
 HEAP32[H_BASE + 3280 >> 2] = H_BASE + 128;
 HEAP32[H_BASE + 3288 >> 2] = H_BASE + 120;
 HEAP32[H_BASE + 3296 >> 2] = H_BASE + 104;
 HEAP32[H_BASE + 3304 >> 2] = H_BASE + 88;
 HEAP32[H_BASE + 3312 >> 2] = H_BASE + 72;
 HEAP32[H_BASE + 3320 >> 2] = H_BASE + 56;
 HEAP32[H_BASE + 3328 >> 2] = H_BASE + 48;
 HEAP32[H_BASE + 3336 >> 2] = H_BASE + 32;
 HEAP32[H_BASE + 3344 >> 2] = H_BASE + 24;
 HEAP32[H_BASE + 3352 >> 2] = H_BASE + 8;
 HEAP32[H_BASE + 3360 >> 2] = H_BASE + 1992;
 HEAP32[H_BASE + 3368 >> 2] = H_BASE + 1984;
 HEAP32[H_BASE + 3376 >> 2] = H_BASE + 1976;
 HEAP32[H_BASE + 3384 >> 2] = H_BASE + 1968;
 HEAP32[H_BASE + 3392 >> 2] = H_BASE + 1952;
 HEAP32[H_BASE + 3400 >> 2] = H_BASE + 1944;
 HEAP32[H_BASE + 3408 >> 2] = H_BASE + 1928;
 HEAP32[H_BASE + 3416 >> 2] = H_BASE + 1912;
 HEAP32[H_BASE + 3424 >> 2] = H_BASE + 1896;
 HEAP32[H_BASE + 3432 >> 2] = H_BASE + 1888;
 HEAP32[H_BASE + 3440 >> 2] = H_BASE + 1856;
 HEAP32[H_BASE + 3448 >> 2] = H_BASE + 1840;
 HEAP32[H_BASE + 3456 >> 2] = H_BASE + 1824;
 HEAP32[H_BASE + 3464 >> 2] = H_BASE + 1808;
 HEAP32[H_BASE + 3472 >> 2] = H_BASE + 1792;
 HEAP32[H_BASE + 3480 >> 2] = H_BASE + 1776;
 HEAP32[H_BASE + 3488 >> 2] = H_BASE + 1768;
 HEAP32[H_BASE + 3496 >> 2] = H_BASE + 1752;
 HEAP32[H_BASE + 3504 >> 2] = H_BASE + 1736;
 HEAP32[H_BASE + 3512 >> 2] = H_BASE + 1720;
 HEAP32[H_BASE + 3520 >> 2] = H_BASE + 1696;
 HEAP32[H_BASE + 3528 >> 2] = H_BASE + 1680;
 HEAP32[H_BASE + 3536 >> 2] = H_BASE + 1664;
 HEAP32[H_BASE + 3544 >> 2] = H_BASE + 1648;
 HEAP32[H_BASE + 3552 >> 2] = H_BASE + 1632;
 HEAP32[H_BASE + 3560 >> 2] = H_BASE + 1616;
 HEAP32[H_BASE + 3568 >> 2] = H_BASE + 1600;
 HEAP32[H_BASE + 3576 >> 2] = H_BASE + 1584;
 HEAP32[H_BASE + 3584 >> 2] = H_BASE + 1560;
 HEAP32[H_BASE + 3592 >> 2] = H_BASE + 1552;
 HEAP32[H_BASE + 3600 >> 2] = H_BASE + 1520;
 HEAP32[H_BASE + 3608 >> 2] = H_BASE + 1504;
 HEAP32[H_BASE + 3616 >> 2] = H_BASE + 1488;
 HEAP32[H_BASE + 3624 >> 2] = H_BASE + 1472;
 HEAP32[H_BASE + 3632 >> 2] = H_BASE + 1456;
 HEAP32[H_BASE + 3640 >> 2] = H_BASE + 1440;
 HEAP32[H_BASE + 3648 >> 2] = H_BASE + 1424;
 HEAP32[H_BASE + 3656 >> 2] = H_BASE + 1408;
 HEAP32[H_BASE + 3664 >> 2] = H_BASE + 1392;
 HEAP32[H_BASE + 3672 >> 2] = H_BASE + 1376;
 HEAP32[H_BASE + 3680 >> 2] = H_BASE + 1336;
 HEAP32[H_BASE + 3688 >> 2] = H_BASE + 1320;
 HEAP32[H_BASE + 3696 >> 2] = H_BASE + 1304;
 HEAP32[H_BASE + 3704 >> 2] = H_BASE + 1288;
 HEAP32[H_BASE + 3712 >> 2] = H_BASE + 1280;
 HEAP32[H_BASE + 3720 >> 2] = H_BASE + 1264;
 HEAP32[H_BASE + 3728 >> 2] = H_BASE + 1248;
 HEAP32[H_BASE + 3736 >> 2] = H_BASE + 1232;
 HEAP32[H_BASE + 3744 >> 2] = H_BASE + 1216;
 HEAP32[H_BASE + 3752 >> 2] = H_BASE + 1200;
}
function __ZN7WebCore13ColorDataHash23colordata_hash_functionEPKcj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 switch (i2 | 0) {
 case 19:
  {
   i3 = 19;
   i4 = 3;
   break;
  }
 case 18:
  {
   i5 = 18;
   i4 = 4;
   break;
  }
 case 17:
  {
   i6 = 17;
   i4 = 5;
   break;
  }
 case 16:
  {
   i7 = 16;
   i4 = 6;
   break;
  }
 case 15:
  {
   i8 = 15;
   i4 = 7;
   break;
  }
 case 14:
  {
   i9 = 14;
   i4 = 8;
   break;
  }
 case 13:
  {
   i10 = 13;
   i4 = 9;
   break;
  }
 case 12:
  {
   i11 = 12;
   i4 = 10;
   break;
  }
 case 11:
  {
   i12 = 11;
   i4 = 11;
   break;
  }
 case 10:
  {
   i13 = 10;
   i4 = 12;
   break;
  }
 case 9:
  {
   i14 = 9;
   i4 = 13;
   break;
  }
 case 8:
  {
   i15 = 8;
   i4 = 14;
   break;
  }
 case 7:
  {
   i16 = 7;
   i4 = 15;
   break;
  }
 case 6:
  {
   i17 = 6;
   i4 = 16;
   break;
  }
 case 5:
  {
   i18 = 5;
   i4 = 17;
   break;
  }
 case 4:
  {
   i19 = 4;
   i4 = 18;
   break;
  }
 case 3:
  {
   i20 = 3;
   i4 = 19;
   break;
  }
 case 2:
  {
   i21 = 2;
   break;
  }
 case 1:
  {
   i22 = 1;
   i23 = HEAP8[i1] | 0;
   i24 = i23 & 255;
   i25 = H_BASE + 2040 + (i24 << 1) | 0;
   i26 = HEAP16[i25 >> 1] | 0;
   i27 = i26 & 65535;
   i28 = i27 + i22 | 0;
   return i28 | 0;
  }
 default:
  {
   i3 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 19 | 0] | 0) << 1) >> 1] | 0) + i2 | 0;
   i4 = 3;
  }
 }
 if ((i4 | 0) == 3) {
  i5 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 18 | 0] | 0) << 1) >> 1] | 0) + i3 | 0;
  i4 = 4;
 }
 if ((i4 | 0) == 4) {
  i6 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 17 | 0] | 0) << 1) >> 1] | 0) + i5 | 0;
  i4 = 5;
 }
 if ((i4 | 0) == 5) {
  i7 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 16 | 0] | 0) << 1) >> 1] | 0) + i6 | 0;
  i4 = 6;
 }
 if ((i4 | 0) == 6) {
  i8 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 15 | 0] | 0) << 1) >> 1] | 0) + i7 | 0;
  i4 = 7;
 }
 if ((i4 | 0) == 7) {
  i9 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 14 | 0] | 0) << 1) >> 1] | 0) + i8 | 0;
  i4 = 8;
 }
 if ((i4 | 0) == 8) {
  i10 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 13 | 0] | 0) << 1) >> 1] | 0) + i9 | 0;
  i4 = 9;
 }
 if ((i4 | 0) == 9) {
  i11 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 12 | 0] | 0) << 1) >> 1] | 0) + i10 | 0;
  i4 = 10;
 }
 if ((i4 | 0) == 10) {
  i12 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 11 | 0] | 0) << 1) >> 1] | 0) + i11 | 0;
  i4 = 11;
 }
 if ((i4 | 0) == 11) {
  i13 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 10 | 0] | 0) + 1 << 1) >> 1] | 0) + i12 | 0;
  i4 = 12;
 }
 if ((i4 | 0) == 12) {
  i14 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 9 | 0] | 0) << 1) >> 1] | 0) + i13 | 0;
  i4 = 13;
 }
 if ((i4 | 0) == 13) {
  i15 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 8 | 0] | 0) << 1) >> 1] | 0) + i14 | 0;
  i4 = 14;
 }
 if ((i4 | 0) == 14) {
  i16 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 7 | 0] | 0) << 1) >> 1] | 0) + i15 | 0;
  i4 = 15;
 }
 if ((i4 | 0) == 15) {
  i17 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 6 | 0] | 0) << 1) >> 1] | 0) + i16 | 0;
  i4 = 16;
 }
 if ((i4 | 0) == 16) {
  i18 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 5 | 0] | 0) << 1) >> 1] | 0) + i17 | 0;
  i4 = 17;
 }
 if ((i4 | 0) == 17) {
  i19 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 4 | 0] | 0) << 1) >> 1] | 0) + i18 | 0;
  i4 = 18;
 }
 if ((i4 | 0) == 18) {
  i20 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 3 | 0] | 0) << 1) >> 1] | 0) + i19 | 0;
  i4 = 19;
 }
 if ((i4 | 0) == 19) {
  i21 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 2 | 0] | 0) << 1) >> 1] | 0) + i20 | 0;
 }
 i22 = (HEAPU16[H_BASE + 2040 + ((HEAPU8[i1 + 1 | 0] | 0) << 1) >> 1] | 0) + i21 | 0;
 i23 = HEAP8[i1] | 0;
 i24 = i23 & 255;
 i25 = H_BASE + 2040 + (i24 << 1) | 0;
 i26 = HEAP16[i25 >> 1] | 0;
 i27 = i26 & 65535;
 i28 = i27 + i22 | 0;
 return i28 | 0;
}
function __ZN7WebCore13ColorDataHash13findColorImplEPKcj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 do {
  if ((i2 - 3 | 0) >>> 0 < 18 >>> 0) {
   i3 = __ZN7WebCore13ColorDataHash23colordata_hash_functionEPKcj(i1, i2) | 0;
   if (i3 >>> 0 >= 1056 >>> 0) {
    break;
   }
   i4 = HEAP16[H_BASE + 3760 + (i3 << 1) >> 1] | 0;
   if (i4 << 16 >> 16 <= -1) {
    break;
   }
   i3 = H_BASE + 2560 + (i4 << 16 >> 16 << 3) | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((HEAP8[i1] | 0) != (HEAP8[i4] | 0)) {
    break;
   }
   if ((_strncmp(i1 + 1 | 0, i4 + 1 | 0, i2 - 1 | 0) | 0) != 0) {
    break;
   }
   if ((HEAP8[i4 + i2 | 0] | 0) == 0) {
    i5 = i3;
   } else {
    break;
   }
   return i5 | 0;
  }
 } while (0);
 i5 = 0;
 return i5 | 0;
}
function __ZN7WebCore9findColorEPKcj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 do {
  if ((i2 - 3 | 0) >>> 0 < 18 >>> 0) {
   i3 = __ZN7WebCore13ColorDataHash23colordata_hash_functionEPKcj(i1, i2) | 0;
   if (i3 >>> 0 >= 1056 >>> 0) {
    break;
   }
   i4 = HEAP16[H_BASE + 3760 + (i3 << 1) >> 1] | 0;
   if (i4 << 16 >> 16 <= -1) {
    break;
   }
   i3 = H_BASE + 2560 + (i4 << 16 >> 16 << 3) | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((HEAP8[i1] | 0) != (HEAP8[i4] | 0)) {
    break;
   }
   if ((_strncmp(i1 + 1 | 0, i4 + 1 | 0, i2 - 1 | 0) | 0) != 0) {
    break;
   }
   if ((HEAP8[i4 + i2 | 0] | 0) == 0) {
    i5 = i3;
   } else {
    break;
   }
   return i5 | 0;
  }
 } while (0);
 i5 = 0;
 return i5 | 0;
}
function _memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + i3 | 0;
 if ((i3 | 0) >= 20) {
  i2 = i2 & 255;
  i5 = i1 & 3;
  i6 = i2 | i2 << 8 | i2 << 16 | i2 << 24;
  i7 = i4 & ~3;
  if (i5) {
   i5 = i1 + 4 - i5 | 0;
   while ((i1 | 0) < (i5 | 0)) {
    HEAP8[i1] = i2;
    i1 = i1 + 1 | 0;
   }
  }
  while ((i1 | 0) < (i7 | 0)) {
   HEAP32[i1 >> 2] = i6;
   i1 = i1 + 4 | 0;
  }
 }
 while ((i1 | 0) < (i4 | 0)) {
  HEAP8[i1] = i2;
  i1 = i1 + 1 | 0;
 }
 return i1 - i3 | 0;
}
function _memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = i1 | 0;
 if ((i1 & 3) == (i2 & 3)) {
  while (i1 & 3) {
   if ((i3 | 0) == 0) return i4 | 0;
   HEAP8[i1] = HEAP8[i2] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = i3 - 1 | 0;
  }
  while ((i3 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
   i3 = i3 - 4 | 0;
  }
 }
 while ((i3 | 0) > 0) {
  HEAP8[i1] = HEAP8[i2] | 0;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  i3 = i3 - 1 | 0;
 }
 return i4 | 0;
}
function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[i1 + 4 | 0];
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[i1 + 5 | 0];
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[i1 + 6 | 0];
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[i1 + 7 | 0];
}
function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr] = HEAP8[i1];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[i1 + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[i1 + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[i1 + 3 | 0];
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return i2 | 0;
}
function dynCall_iii(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iii[i1 & 1](i2 | 0, i3 | 0) | 0;
}
function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = i1;
 while (HEAP8[i2] | 0) {
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}
function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = i1;
  threwValue = i2;
 }
}
function dynCall_ii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_ii[i1 & 1](i2 | 0) | 0;
}
function dynCall_vi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vi[i1 & 1](i2 | 0);
}
function b2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(2);
 return 0;
}
function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 1]();
}
function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}
function setTempRet9(i1) {
 i1 = i1 | 0;
 tempRet9 = i1;
}
function setTempRet8(i1) {
 i1 = i1 | 0;
 tempRet8 = i1;
}
function setTempRet7(i1) {
 i1 = i1 | 0;
 tempRet7 = i1;
}
function setTempRet6(i1) {
 i1 = i1 | 0;
 tempRet6 = i1;
}
function setTempRet5(i1) {
 i1 = i1 | 0;
 tempRet5 = i1;
}
function setTempRet4(i1) {
 i1 = i1 | 0;
 tempRet4 = i1;
}
function setTempRet3(i1) {
 i1 = i1 | 0;
 tempRet3 = i1;
}
function setTempRet2(i1) {
 i1 = i1 | 0;
 tempRet2 = i1;
}
function setTempRet1(i1) {
 i1 = i1 | 0;
 tempRet1 = i1;
}
function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}
function b0(i1) {
 i1 = i1 | 0;
 abort(0);
 return 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b3(i1) {
 i1 = i1 | 0;
 abort(3);
}
function b1() {
 abort(1);
}
// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0];
  var FUNCTION_TABLE_v = [b1,b1];
  var FUNCTION_TABLE_iii = [b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3];
  return { _strlen: _strlen, _memcpy: _memcpy, _memset: _memset, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_strncmp": _strncmp, "_malloc": _malloc, "___setErrNo": ___setErrNo, "_free": _free, "_fflush": _fflush, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
function run(args) {
  initRuntime();
}
Module['run'] = run;
// {{PRE_RUN_ADDITIONS}}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
  return Module;
});
// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_strlen","__ZN7WebCore13ColorDataHash23colordata_hash_functionEPKcj","__ZN7WebCore9findColorEPKcj","_memset","_memcpy","__ZN7WebCore13ColorDataHash13findColorImplEPKcj"]
